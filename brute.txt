Sure, I'd be happy to explain the components of the code!

Function Definition
The function numOfWays takes in three integers: f, d, and s. It returns a long integer, which represents the number of ways that s can be obtained as the sum of d dice, where each die has f faces.

2D Table
A 2D table called table is created with dimensions (d + 1) x (s + 1) to represent all possible sums that can be obtained using d dice and f faces. An extra row and column are added to simplify the indexing of the table.

Table Initialization
The table is initialized to 0 using a nested for loop. This step ensures that all values in the table are initially set to 0.

Base Value
The base value of the table, table[0][0], is set to 1. This is because there is only one way to obtain a sum of 0 using 0 dice.

Table Computation
The function uses a nested for loop to compute the values in the table. The outer loop iterates over the number of dice (d), and the inner loop iterates over the possible sums (s). At each iteration, the function calculates the value of table[i][j] using the general equation for the number of ways to obtain a sum of j using i dice and f faces. If the sum to be found (j) is greater than the number of faces (f), the function subtracts the extra values that were added in the previous step.

Return Value
The function returns the value in table[d][s], which represents the number of ways to obtain a sum of s using d dice and f faces.

Main Function
The main function simply calls the numOfWays function with various arguments and prints the returned value to the console using the %ld format specifier for long integers.




#include <stdio.h>
#include <stdlib.h>
#include <string.h>

long numOfWays(int f, int d, int s) 
{ 
    //Create a 2d table with one extra row and column for simplicity. 
    long table[d + 1][s + 1]; 

    //Initialise the table with 0.
    memset(table, 0, sizeof(table)); 

    // Base value
    table[0][0] = 1; 

    // Iterate over dice
    for (int i = 1; i <= d; i++) 
    { 
        // Iterate over sum 
        for (int j = i; j <= s; j++) 
        { 
            //general equation to obtain Sum(f,s,d)
            table[i][j] = table[i][j - 1] + table[i - 1][j - 1]; 

            //Some extra values are added when j>f 
            // i.e when sum to be found is greater than the number of faces. 
            // Such values need to removed.
            if (j > f) 
                table[i][j] -= table[i - 1][j - f - 1]; 

        } 
    } 
    return table[d][s]; 
} 

int main(){
    printf("%ld\n", numOfWays(4, 2, 1)); 
    printf("%ld\n", numOfWays(2, 2, 3)); 
    printf("%ld\n", numOfWays(6, 3, 8)); 
    printf("%ld\n", numOfWays(5, 3, 8)); 
    printf("%ld\n", numOfWays(4, 2, 5)); 
    printf("%ld\n", numOfWays(4, 3, 5)); 

    return 0;
}
